import { controllers } from "./config/di/container";
import { productsRoutes } from "./interfaces/http/express/routes/products.routes";
import { uploadRoutes } from "./interfaces/http/express/routes/upload.routes";
import { productCategoriesRoutes } from "./interfaces/http/express/routes/productCategories.routes";
import express from 'express';
import cors from 'cors'; // ƒê·∫£m b·∫£o ƒë√£ import
import helmet from 'helmet';
// import { sequelize } from './config/database'; 

const app = express();

// --- B·∫ÆT ƒê·∫¶U PH·∫¶N B·ªî SUNG B·ªä THI·∫æU ---

// X√°c ƒë·ªãnh URL frontend c·ªßa b·∫°n (v√≠ d·ª•: 3001 cho React, 5173 cho Vite...)
const allowedOrigins = [
  process.env.FRONTEND_URL || 'http://localhost:3001', // <-- THAY B·∫∞NG PORT FRONTEND C·ª¶A B·∫†N
  'http://localhost:5173', // <-- Port Vite/React/Vue kh√°c (n·∫øu c√≥)
  'http://localhost:3000', // C√≥ th·ªÉ cho ph√©p ch√≠nh n√≥
];

// ƒê·ªãnh nghƒ©a bi·∫øn `corsOptions` m√† TS ƒëang b√°o thi·∫øu
const corsOptions: cors.CorsOptions = {
  origin: (origin, callback) => {
    // Cho ph√©p request kh√¥ng c√≥ origin (nh∆∞ Postman) ho·∫∑c origin n·∫±m trong danh s√°ch
    if (!origin || allowedOrigins.indexOf(origin) !== -1) {
      callback(null, true);
    } else {
      callback(new Error('Not allowed by CORS'));
    }
  },
  methods: 'GET,POST,PUT,PATCH,DELETE,OPTIONS', // C√°c method cho ph√©p
  allowedHeaders: 'Content-Type, Authorization', // C√°c header cho ph√©p
  credentials: true, 
};

// --- K·∫æT TH√öC PH·∫¶N B·ªî SUNG ---


// 1. S·ª≠ d·ª•ng c·∫•u h√¨nh CORS (Gi·ªù 'corsOptions' ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a)
app.use(cors(corsOptions));

// 2. D√≤ng n√†y ƒë√£ b·ªã x√≥a ch√≠nh x√°c (kh√¥ng g√¢y l·ªói)
// app.options('*', cors(corsOptions)); 

// 3. C√°c middleware kh√°c
app.use(express.json());
app.use(helmet());

app.use(express.json({ limit: "15mb" }));
app.use(express.urlencoded({ extended: true, limit: "15mb" }));

// 4. Mount routes
app.use("/api/v1/admin/products", productsRoutes(controllers.products));
app.use("/api/v1/admin/upload", uploadRoutes(controllers.upload));
app.use("/api/v1/admin/product-category", productCategoriesRoutes(controllers.categories));

// Error middleware ƒë∆°n gi·∫£n
app.use((err: any, _req: express.Request, res: express.Response, _next: express.NextFunction) => {
  console.error(err);
  
  if (err.message === 'Not allowed by CORS') {
    return res.status(403).json({ error: "CORS error: Access forbidden" });
  }

  const status = err.statusCode || 400;
  res.status(status).json({ error: err.message || "Unexpected error" });
});

(async () => {
  try {
    // await sequelize.authenticate(); // B·ªè comment n·∫øu b·∫°n c√≥ sequelize
    // console.log("‚úÖ DB connected");
  } catch (e) {
    console.error("‚ùå DB connection error:", e);
  }

  const PORT = process.env.PORT ? Number(process.env.PORT) : 3000;
  app.listen(PORT, () => console.log(`üöÄ Server running on http://localhost:${PORT}`));
})();